version: '3.9'

networks:
  frontend:
  backend:

volumes:
  pg_data:
  redis_data:
  minio_data:
  traefik_data:

services:
  traefik:
    image: traefik:v3.1
    container_name: ctf_traefik
    restart: unless-stopped
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - frontend
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/ping || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16
    container_name: ctf_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ctf
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    container_name: ctf_redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  minio:
    image: minio/minio:latest
    container_name: ctf_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minio12345}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:9000/minio/health/live || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Build api image from monorepo
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    image: ghcr.io/${GITHUB_REPOSITORY:-local/ctf}/api:latest
    container_name: ctf_api
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/ctf
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minio}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minio12345}
      MINIO_BUCKET: ${MINIO_BUCKET:-ctf}
      PORT: 4000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - frontend
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${API_HOST:-api.ctf.example.com}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=le"
      - "traefik.http.services.api.loadbalancer.server.port=4000"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:4000/api/health | grep ok || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    image: ghcr.io/${GITHUB_REPOSITORY:-local/ctf}/web:latest
    container_name: ctf_web
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      NODE_ENV: production
      NEXTAUTH_URL: https://${WEB_HOST:-ctf.example.com}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXT_PUBLIC_API_URL: https://${API_HOST:-api.ctf.example.com}
      PORT: 3000
    depends_on:
      api:
        condition: service_healthy
    networks:
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${WEB_HOST:-ctf.example.com}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=le"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:3000 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10

  worker:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    image: ghcr.io/${GITHUB_REPOSITORY:-local/ctf}/worker:latest
    container_name: ctf_worker
    restart: unless-stopped
    command: ["node", "dist/main.js", "--worker"]
    env_file:
      - ./.env
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/ctf
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend

  # One-off migration + seed using builder context
  migrate:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
      target: builder
    image: local/ctf-migrate:latest
    container_name: ctf_migrate
    restart: "no"
    env_file:
      - ./.env
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/ctf
    command: ["sh", "-lc", "pnpm -C packages/db generate && pnpm -C packages/db migrate:deploy && pnpm -C packages/db seed"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
